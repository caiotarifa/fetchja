{
  "version": 3,
  "sources": ["../src/index.js", "../src/utils/deattribute.js", "../src/utils/deserialize.js", "../src/utils/error-parser.js", "../src/utils/serialize.js", "../src/utils/query-formatter.js", "../src/utils/split-model.js", "../src/utils/camel-case.js", "../src/utils/kebab-case.js", "../src/utils/snake-case.js"],
  "sourcesContent": ["import pluralize from 'pluralize'\n\nimport { deserialize } from './utils/deserialize.js'\nimport { serialize } from './utils/serialize.js'\n\nimport { errorParser } from './utils/error-parser.js'\nimport { queryFormatter } from './utils/query-formatter.js'\nimport { splitModel } from './utils/split-model.js'\n\nimport { camelCase } from './utils/camel-case.js'\nimport { kebabCase } from './utils/kebab-case.js'\nimport { snakeCase } from './utils/snake-case.js'\n\nconst jsonType = 'application/vnd.api+json'\n\n/**\n * Options for Fetchja.\n * \n * @typedef {Object} FetchjaOptions\n * @property {string} baseURL The base URL for all requests.\n * @property {Function} fetchFunction A custom fetch function to use in request.\n * @property {Object} headers The headers to include in all requests.\n * @property {Function} queryFormatter A function to format query parameters.\n * @property {string} resourceCase The case to use for resource names.\n * @property {boolean} pluralize Pluralize resource names.\n */\n\n/**\n * Fetchja is a simple wrapper around the Fetch API.\n * \n * @class Fetchja\n * @param {FetchjaOptions} [options] Options for Fetchja.\n */\nexport default class Fetchja {\n  constructor (options = {\n    headers: {}\n  }) {\n    this.baseURL = options.baseURL\n\n    // Headers\n    this.headers = {\n      Accept: jsonType,\n      'Content-Type': jsonType,\n      ...options.headers\n    }\n\n    // Fetch Function\n    this.fetchFunction = options.fetchFunction\n\n    // Query\n    this.queryFormatter = typeof options.queryFormatter === 'function'\n      ? options.queryFormatter\n      : object => queryFormatter(object)\n\n    // Camel Case Types\n    this.camelCaseTypes = options.camelCaseTypes === false\n      ? string => string\n      : camelCase\n\n    // Resource Case\n    const cases = {\n      camel: camelCase,\n      kebab: kebabCase,\n      snake: snakeCase,\n\n      default: string => string\n    }\n\n    this.resourceCase = cases[options.resourceCase] || cases.default\n    \n    // Pluralise\n    this.pluralize = options.pluralize === false\n      ? string => string\n      : pluralize\n\n    // Interceptors\n    this.onResponseError = error => error\n\n    // Alias\n    this.fetch = this.get\n    this.update = this.patch\n    this.create = this.post\n    this.remove = this.delete\n  }\n\n  #splitModel (model) {\n    return splitModel(model, {\n      resourceCase: this.resourceCase,\n      pluralize: this.pluralize\n    })\n  }\n\n  async request (options = {\n    method: 'GET',\n    headers: {}\n  }) {\n    const baseURL = this.baseURL || options.baseURL\n\n    const url = new URL(\n      options.url.startsWith('/') ? options.url.slice(1) : options.url,\n      baseURL.endsWith('/') ? baseURL : baseURL + '/'\n    )\n\n    // Params\n    if (options.params) {\n      url.search = this.queryFormatter(options.params)\n    }\n\n    // Body\n    if (options.body) {\n      options.body = serialize(options.type, options.body, {\n        camelCaseTypes: this.camelCaseTypes,\n        pluralTypes: this.pluralize\n      })\n    }\n\n    // Request\n    const makeRequest = () => {\n      // Headers\n      const headers = new Headers({\n        ...this.headers,\n        ...options.headers\n      })\n\n      // Fetch\n      const fetchOptions = {\n        method: options.method,\n        body: options.body,\n        headers\n      }\n\n      if (typeof this.fetchFunction === 'function') {\n        return this.fetchFunction(url, fetchOptions)\n      }\n\n      return fetch(url, fetchOptions)\n    }\n\n    try {\n      let response = await makeRequest()\n\n      if (!response.ok) {\n        response.replayRequest = makeRequest\n\n        const replayedResponse = await this.onResponseError(response)\n\n        if (replayedResponse instanceof Response) {\n          response = replayedResponse\n        }\n\n        if (!response.ok) {\n          throw new Error(response.statusText)\n        }\n      }\n\n      // Response Headers\n      const responseHeaders = {}\n\n      for (const [key, value] of response.headers.entries()) {\n        responseHeaders[key] = value\n      }\n\n      const contentType = responseHeaders['content-type']\n\n      // Response Data\n      const data = contentType && contentType.includes(jsonType)\n        ? await response.json()\n        : {}\n\n      // Return\n      return {\n        ...(data.errors ? data : deserialize(data)),\n\n        status: response.status,\n        statusText: response.statusText,\n        headers: responseHeaders\n      }\n    } catch (error) {\n      throw error\n    }\n  }\n\n  get (model, options = { method: 'GET' }) {\n    try {\n      options.url = model.split('/')\n        .map(part => this.resourceCase(part))\n        .filter(Boolean)\n        .join('/')\n\n      return this.request(options)\n    } catch (error) {\n      throw errorParser(error)\n    }\n  }\n\n  patch (model, body, options = { method: 'PATCH' }) {\n    try {\n      const [type, url] = this.#splitModel(model)\n\n      return this.request({\n        url: body?.id ? `${url}/${body.id}` : url,\n        body,\n        type,\n\n        ...options\n      })\n    } catch (error) {\n      throw errorParser(error)\n    }\n  }\n\n  post (model, body, options = { method: 'POST' }) {\n    try {\n      const [type, url] = this.#splitModel(model)\n\n      return this.request({\n        url,\n        body,\n        type,\n\n        ...options\n      })\n    } catch (error) {\n      throw errorParser(error)\n    }\n  }\n\n  delete (model, id, options = { method: 'DELETE' }) {\n    try {\n      const [type, url] = this.#splitModel(model)\n\n      return this.request({\n        url: `${url}/${id}`,\n        body: { id },\n        type,\n\n        ...options\n      })\n    } catch (error) {\n      throw errorParser(error)\n    }\n  }\n}\n", "/**\n * Deattribute JSON:API data.\n *\n * @param {Object|Object[]} data The JSON:API data to deattribute.\n * @returns {Object} The deattributed data.\n */\nexport function deattribute (data) {\n  if (Array.isArray(data)) {\n    return data.map(deattribute)\n  }\n\n  const output = {\n    type: data.type,\n    id: data.id\n  }\n\n  for (const key in data.attributes) {\n    output[key] = data.attributes[key]\n  }\n\n  for (const key in data.relationships) {\n    if (data.relationships[key].data) {\n      output[key] = data.relationships[key].data\n    }\n  }\n\n  return output\n}", "import { deattribute } from './deattribute.js'\n\n/**\n * Group included JSON:API data by type and ID.\n *\n * @param {Object[]} included The included JSON:API data.\n * @returns {Object} The grouped included data.\n */\nfunction groupIncluded (included) {\n  const groups = {}\n\n  for (const item of included) {\n    if (!groups[item.type]) {\n      groups[item.type] = {}\n    }\n\n    groups[item.type][item.id] = deattribute(item)\n  }\n\n  return groups\n}\n\n/**\n * Checks if a value is an object.\n *\n * @param {*} object The value to check.\n * @returns {boolean} Whether the value is an object.\n */\nfunction hasObject (object) {\n  return typeof object === 'object' && object !== null\n}\n\n/**\n * Deserialises a JSON-API response.\n *\n * @param {Object} response The JSON-API response.\n * @returns {Object} The deserialised response.\n */\nexport function deserialize (response) {\n  const output = {}\n\n  if (response.data) {\n    output.data = deattribute(response.data)\n  }\n\n  if (response.meta) {\n    output.meta = response.meta\n  }\n\n  if (response.included) {\n    const included = groupIncluded(response.included)\n\n    const getIncluded = item => item.type in included\n      ? included[item.type][item.id]\n      : item\n\n    const replace = item => Array.isArray(item)\n      ? item.map(getIncluded)\n      : getIncluded(item)\n\n    // Replace relationships with included data.\n    for (const type in included) {\n      for (const id in included[type]) {\n        for (const key in included[type][id]) {\n          const item = included[type][id][key]\n\n          if (hasObject(item)) {\n            included[type][id][key] = replace(item)\n          }\n        }\n      }\n    }\n\n    // Replace relationships in the main data with included data.\n    if (Array.isArray(output.data)) {\n      for (const item of output.data) {\n        for (const key in item) {\n          if (hasObject(item[key])) {\n            item[key] = replace(item[key])\n          }\n        }\n      }\n    } else if (hasObject(output.data)) {\n      for (const key in output.data) {\n        if (hasObject(output.data[key])) {\n          output.data[key] = replace(output.data[key])\n        }\n      }\n    }\n  }\n\n  return output\n}", "/**\n * Parse the error response from the API.\n *\n * @param {Object} error The error object.\n * @throws {Error} The parsed error object.\n */\nexport function errorParser (error) {\n  if (error.response) {\n    const { data } = error.response\n\n    if (data?.errors) {\n      error.errors = data.errors\n    }\n  }\n\n  throw error\n}\n", "import { errorParser } from './error-parser.js'\n\n/**\n * Checks if a value is an object.\n *\n * @param {*} object The object to check.\n * @returns {boolean} Whether the value is an object.\n */\nfunction hasObject (object) {\n  return typeof object === 'object' && object !== null\n}\n\n/**\n * Serialises a JSON-API request.\n * \n * @param {string} type The entity name.\n * @param {Object} request The request to serialise.\n * @param {Object} options The serialisation options.\n * @returns {string} The JSON serialised request.\n */\nexport function serialize (type, request, options = {\n  camelCaseTypes: string => string,\n  pluralTypes: string => string\n}) {\n  const included = []\n\n  function include (node, subtype) {\n    if (!hasObject(node)) {\n      return\n    }\n\n    if (!node.id) {\n      throw new Error('All included resources must have an ID.')\n    }\n\n    if (!included.find(item => item.id === node.id)) {\n      included.push(extractData(node, subtype))\n    }\n  }\n\n  function extractData (node, subtype) {\n    const data = {\n      type: options.pluralTypes(options.camelCaseTypes(subtype))\n    }\n\n    for (const key in node) {\n      if (key === 'type') {\n        continue\n      }\n\n      if (key === 'id') {\n        data.id = String(node.id)\n        continue\n      }\n      \n      const value = node[key]\n\n      // Is this a relationship?\n      if (typeof value === 'object') {\n        data.relationships = data.relationships || {}\n\n        // One-To-Many / Many-To-Many\n        if (Array.isArray(value)) {\n          data.relationships[key] = {\n            data: value.map(item => {\n              include(item, key)\n              return { type: item.type || key, id: item.id }\n            })\n          }\n\n          continue\n        }\n\n        // One-To-One\n        data.relationships[key] = {\n          data: { type: value.type || key, id: value.id }\n        }\n\n        include(value, key)\n\n        continue\n      }\n\n      // Is this an attribute?\n      data.attributes = data.attributes || {}\n      data.attributes[key] = node[key]\n    }\n\n    return data\n  }\n\n  try {\n    const data = extractData(request, type)\n    return JSON.stringify({ data, included })\n  } catch (error) {\n    errorParser(error)\n  }\n}\n", "/**\n * Loop through an object and build a query string.\n * \n * @param {URLSearchParams} query The query to append to.\n * @param {Object} object The object to loop through.\n * @param {string} prefix The prefix to use.\n * @returns {void}\n * @private\n */\nfunction buildQuery (query, object = {}, prefix = '') {\n  const isArray = Array.isArray(object)\n\n  for (const key in object) {\n    const value = object[key]\n    const withPrefix = prefix ? `${prefix}[${isArray ? '' : key}]` : key\n\n    value instanceof Object\n      ? buildQuery(query, value, withPrefix)\n      : query.append(withPrefix, value)\n  }\n}\n\n/**\n * Format query parameters.\n * \n * @param {Object} parameters The parameters to format.\n * @returns {URLSearchParams} The formatted query.\n */\nexport function queryFormatter (parameters = {}) {\n  const query = new URLSearchParams()\n  buildQuery(query, parameters)\n\n  return query\n}\n", "/**\n * Split a model name from a URL.\n *\n * @param {string} url The URL to split.\n * @param {Object} options The options to use.\n * @returns {string[]} The model and resource.\n */\nexport function splitModel (url, options = {\n  resourceCase: string => string,\n  pluralize: string => string\n}) {\n  const parts = url.split('/')\n  const model = parts.pop()\n  const resource = parts.join('/')\n\n  return [\n    model,\n    `${resource}/${options.pluralize(options.resourceCase(model))}`\n  ]\n}\n", "/**\n * Convert a string from snake_case and kebab-case to camelCase.\n *\n * @param {string} input The string to convert.\n * @returns {string} The converted string.\n */\nexport function camelCase (input) {\n  return input\n    .toLowerCase()\n    .replace(/[-_](.)/g, (_, char) => char.toUpperCase())\n    .replace(/^(.)/, (char) => char.toLowerCase())\n}\n", "/**\n * Convert a string from camelCase and snake_case to kebab-case.\n *\n * @param {string} input The string to convert.\n * @returns {string} The converted string.\n */\nexport function kebabCase (input) {\n  return input\n    .replace(/([a-z])([A-Z])/g, '$1-$2')\n    .replace(/_/g, '-')\n    .toLowerCase()\n}\n", "/**\n * Converts a string from camelCase and kebab-case to snake_case.\n *\n * @param {string} input The string to convert.\n * @returns {string} The converted string.\n */\nexport function snakeCase (input) {\n  return input\n    .replace(/([a-z])([A-Z])/g, '$1_$2')\n    .replace(/-/g, '_')\n    .toLowerCase()\n}\n"],
  "mappings": "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",
  "names": ["pluralize", "deattribute", "data", "output", "key", "groupIncluded", "included", "groups", "item", "deattribute", "hasObject", "object", "deserialize", "response", "output", "getIncluded", "replace", "type", "id", "key", "errorParser", "error", "data", "hasObject", "object", "serialize", "type", "request", "options", "string", "included", "include", "node", "subtype", "item", "extractData", "data", "key", "value", "error", "errorParser", "buildQuery", "query", "object", "prefix", "isArray", "key", "value", "withPrefix", "queryFormatter", "parameters", "splitModel", "url", "options", "string", "parts", "model", "resource", "camelCase", "input", "_", "char", "kebabCase", "input", "snakeCase", "input", "jsonType", "Fetchja", "options", "object", "queryFormatter", "string", "camelCase", "cases", "kebabCase", "snakeCase", "pluralize", "error", "#splitModel", "model", "splitModel", "baseURL", "url", "serialize", "makeRequest", "headers", "fetchOptions", "response", "replayedResponse", "responseHeaders", "key", "value", "contentType", "data", "deserialize", "part", "errorParser", "body", "type", "id"]
}
